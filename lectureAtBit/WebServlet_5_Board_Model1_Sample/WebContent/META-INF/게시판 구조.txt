1. 현재 프로젝트 게시판 만들기 연습 (Model1 방식으로)
1.1 [JSP] 가 [클라이언트] 요청을 받고 흐름을 제어

단) Model > DTO, DAO 사용

단) Servlet 사용하지 않아요   

1.2 
   <form action="loginok.jsp" 코딩 ....
   
1.3 Model2 기반 MVC
    [servlet] 가 [클라이언트] 요청을 받고 흐름을 제어
   
    <form action="Memolist" 코딩 ....
----------------------------------------------------------
게시판 만들기

1. DB 설계 (Table 만들기)
1.1 요구사항 파악
-게시판 종류
--일반게시판 (답글(x)) >> 공지사항 게시판
--답변(답글) 계층형 게시판  (답글(0))
--일반게시판 , 답변(계층형) 게시판  : 댓글게시판 (옵션) : 비동기(기능적 요구사항)


게시판 (일반,계층형) 
---회원 전용 게시판
---비회원 전용 게시판

일반게시판 : 회원전용 (로그인한 사용자 (권한처리 : session))
일반게시판 : 비회원전용 (비번처리 :글수정 , 삭제  권한 처리) > 글쓴이 , 비번 

계층형게시판 : 회원전용 (로그인한 사용자 (권한처리 : session))
계층형게시판 : 비회원전용 (비번처리 :글수정 , 삭제  권한 처리) > 글쓴이 , 비번 

-----------------------------------------------------------------
테이블 설계
(비인증형 일반 게시판)
create table board(
	idx number constraint pk_board_idx primary key,
    --글번호 (오라클 : sequence 객체) --MS-sql , mysql(테이블에 종속 자동증가)
    writer varchar2(30) not null,
    --글쓴이(필수 입력 사항 : 회원전용 > 로그인한 ID값 (session) , 비회원전용 : 입력)
    pwd varchar2(30) not null,
    --회원전용(x) , 비회원(0)
    subject varchar2(50) not null, --글제목
    content varchar2(2000) not null, 글내용
    filename varchar2(50), --파일명 또는 파일경로 (note.hwp)
    filesize number, --byte 옵션
    writedate date default SYSDATE, --기본값 설정 (DB 서버 날짜 insert)
    readnum number default 0, --글 조회수 증가 (업무 로직 구현)
    homepage varchar2(20), --옵션 ...
    email varchar2(20) -- 옵션 ... 필수 입력사항이 아님 (null 허용) 
);

------------------------------------------------------------
(비인증형 계층형 게시판)
create table multiboard(
	idx number constraint pk_board_idx primary key,
    --글번호 (오라클 : sequence 객체) --MS-sql , mysql(테이블에 종속 자동증가)
    writer varchar2(30) not null,
    --글쓴이(필수 입력 사항 : 회원전용 > 로그인한 ID값 (session) , 비회원전용 : 입력)
    pwd varchar2(30) not null,
    --회원전용(x) , 비회원(0)
    subject varchar2(50) not null, --글제목
    content varchar2(2000) not null, 글내용
    filename varchar2(50), --파일명 또는 파일경로 (note.hwp)
    filesize number, --byte 옵션
    writedate date default SYSDATE, --기본값 설정 (DB 서버 날짜 insert)
    readnum number default 0, --글 조회수 증가 (업무 로직 구현)
    homepage varchar2(20), --옵션 ...
    email varchar2(20), -- 옵션 ... 필수 입력사항이 아님 (null 허용) 
    
    --추가적인 컬럼
    refer number default 0, --참조글 or 글의 그룹번호
    depth number default 0, --글의 깊이, 들여쓰기 (화면처리) 로직 (x)
    step  number default 0, --글의 정렬 순서 , 답글 정렬
);

idx ,  ref  , depth , step ,   		title
1       1       0      0       		원본글  
2       2       0      0       		원본글2
3       1       1      1       		원본글     답글1-1 (원본글 : idx:1)
4       2       1      1       		원본글2  답글2-1 (원본글 : idx:2) 
5       1       2      2(+1)> 3     답글1-2  답글1-1 (읽고 있는 글 : idx:3)
6       1       2      2        	답글1-1  답글1-1 (읽고 있는 글 : idx:3)

--------------------
order by ref desc  , step asc
화면에 출력
idx
2           2    0    0
>4          2    1    1 
1           1    0    0
>3          1    1    1
>>7         1    2    2
>>6         1    2    2+1 > 3
>>5         1    2    3+1 > 4
------------------------------------------
일반 게시판
select * from board order by idx desc (최신글 위에)

계층형 게시판
논리 2가지
1. 최신 답글을 위로
2. 답글쓴 순서대로 

1. 최신 답글을 위로
규칙 : 원본글 : depth , step >> 0 0
	 (같은  ref)현재 read 한 글의 step 값다 더 큰 step 값이 있으면 +1  
          답글 : depth+1  step+1

select * from multiboard order by ref desc , step asc
*******************************************************************
select * from multiboard order by ref desc , step asc
update multiboard set step= step+1 where refer =? and step > ? 

pstmt.setInt(9, depth+1); // 규칙 현재 읽은 글에 depth + 1
pstmt.setInt(10, step+1); // 순서 update 통해서  자리 확보 + 1				    		   
-------------------------------------------------------------------
select * from multiboard order by ref desc, step desc
update multiboard set step=step+1 where refer=? and step >= ?
----------------------------------------------------------
--순번 처리 (oracle)
create sequence board_idx
start with 1
increment by 1;
----------------------------------------------------------
--댓글(꼬리말) 을 위한 테이블 생성
--댓글은 누구의 댓글인가 
--일반게시판 글번호 ...... 필요 .....

create table reply(
 no number primary key,
 writer varchar2(30),
 pwd varchar2(30),
 content varchar2(2000),
 writedate date default sysdate,
 idx number not null
);
--이어서 목요일
....
alter table reply
add constraint fk_reply_deptno foreign key(idx) references board(idx);

board 원본글
10, 방가방가, .....

누군가 10번 글을 읽고 댓글 > reply >> insert
insert into reply(no,....idx) values(1,....10

select idx from board where idx=10;

reply 댓글
1, 나도방가,...10
2,방가,...10

--
board10 read 하면 reply 데이터...
select *from reply where idx=10

-------------------------------------------------------
개발...

Model1 방식의 개발
>요청을 JSP 처리 > Model(DTO,DAO) > 요청 <form action='ok.jsp'>
								<a href='board_write.jsp'>

Model2 방식의 개발
>요청을 JSP 처리 > Model(DTO,DAO) > 요청 <form action='ok.do'>
								<a href='board_write.do'>
								
-----------------------------------------------
요청받고 화면처리 :jsp
WebContent > login.jsp, loginok.jsp... (Model1 설계)
WebContent > WEB-INF > views >login.jsp,loginok.jsp (Model2 설계)

WebContent > 폴더구조
>board>list.jsp, write.jsp > images폴더 >...
>member > memberlist.jsp, memberwrite.jsp > images폴더 >...
>images > 공통이미지
>css
>js

서비스 데이터 처리: java(Model)
kr.or.bit.dto > 데이터 1건을 담을 수 있는 클래스
kr.or.bit.dao > DB 연결 CRUD 함수를 만드는 클래스
kr.or.bit.service > 업무수행(로그인,회원가입...) DTO, DAO 객체를 생성해서 사용
추가(문자처리,날짜처리,페이징처리,DB연결...)
별도의 클래스
kr.or.bit.utils
--------------------------------------------------------
배포(조원들에게배포)
-------------------------------------------------------
글쓰기 글읽기 답글 댓글 ....

**업무 하나당**
**화면단(jsp) + 로직처리(jsp)**
**login.jsp + loginok.jsp**

1. board_write.jsp : 글쓰기 (UI -> Form(input) -> submit(+유효성 검증))
주의사항 : <input name="" ... 서버에 데이터 받기 가능
주의사항 : action="처리" >> board_writeOk.jsp

2.board_writeOk.jsp : 글쓰기처리 ( 한글처리 > 데이터 받기 >DB 연결 > insert > 처리(성공) > 목록이동
주의사항 : insert 실패처리(DB not null >> insert..), 중복값(sequence), 타입크기(고민)

[DB 연결 > insert > 처리(성공)] >> service 에게 위임...

Model(dto,dao,service)
jsp 는 dao 직접 관리하지 않아요... jsp는 service 관리...
..jsp dao 객체를 생성하지 않을 거에요... service에게 

board_writeOk.jsp
DTO > class Message{private String title:}
JSP > Message messgae = new Message();
messgae.setTitle(request.getParameter("title"));
boardservice service = boardservice.getInstance();
int result = service.writeOk(message);
>> boardservice >> public void writeOk(Message m){Dao dao = new Dao(); dao.writeok(m)}


board_write.jsp >> board_writeOk.jsp -> 데이터 받기 -> DTO 생성 -> DTO 데이터 넣기 >> Service 객체 
-> BoardDao 객체 -> Service 객체 >> board_writeOk.jsp 
-> 페이지 이동처리(board_list.jsp or board_write.jsp;)
-------------------------
board_list.jsp : 게시물 목록 보여주기
화면에 출력 : 글 번호, 글 제목, 글 쓴 날짜, 조회수
글의 내용(상세보기)

select 글번호, 글제목, 글쓴 날짜, 조회수
From jspboard order by refer, step asc;

board_list.jsp 요청 >> service 객체 -> BoardDao 객체 -> 함수에서 return List<Board> -> service 받아서 
-> service return List<Board> -> 화면 출력 -><c:forEach var="board" items="<%=list%>">   

주의사항(중요)
1. 링크 구현(제목 :처리) -> parameter(get) -> idx( 필수) 글번호
2. 페이징 처리( The pager)...
3. EL & JSTL 9제어문)
--------------------------------------------
board_content.jsp
-상세페이지 : 글번호 받기(idx) : select.. where idx=10 : 고정된 화면 출력
-> 목록, 수정 , 삭제 (링크 구성)
->board_list.jsp?cp=1&ps=5
->수정 :board_edit.jsp?idx=1
->삭제 : board_delete.jsp?idx=1

기능추가 조회수

댓글(reply): UI 구성, 
------------------------------------------------